{
    "Motioneye": {
        "containers": {
            "motioneye": {
                "image": "enros/motioneye",
                "launch_order": 1,
                "opts": [ ["--net", "host" ] ],
                "ports": {
                    "8081": {
                        "description": "Port for Web-ui managment. Suggested default: 8765.",
                        "host_default": 8765,
                        "label": "Web-ui port",
                        "protocol": "upd",
                        "ui": true
                    },
                    "8765": {
                        "description": "Port/-s for streaming data. Add more ports to this JSON if having more than one camera. Eg. 8081,8082,8083... Suggested starting default: 8081.",
                        "host_default": 8081,
                        "label": "Streaming port",
                        "protocol": "upd",
                        "ui": false
                    }
                },
                "volumes": {
                    "/etc/motioneye": {
                        "description": "Choose a Share for configuration. Eg: create a Share called motioneye-config for this purpose alone.",
                        "label": "Config Storage"
                    },
                    "/var/lib/motioneye": {
                        "description": "Choose a Share for file storage for still images and movies. Eg: create a Share called motioneye-media for this purpose",
                        "label": "Security media Storage"
                    }
                },
                "environment": {
                    "PUID": {
                        "description": "Enter a valid UID to run Motioneye with. It must have full permissions to all Shares mapped in the previous step.",
                        "label": "UID",
                        "index": 1
                    },
                    "PGID": {
                        "description": "Enter a valid GID to use along with the same UID. It(or the above UID) must have full permissions to all Shares mapped",
                        "label": "GID",
                        "index": 2
                    }
                }
            }
        },
        "description": "motionEye is a web frontend for the motion daemon, written in Python. Attention! This Rockone requires 'motion' package to be installed manually from CLI as root 'zypper install motion",
        "ui": {
            "https": true,
            "slug": ""
        },
        "volume_add_support": true,
        "website": "https://github.com/motioneye-project/motioneye",
        "version": "0.42.1"
    }
}
